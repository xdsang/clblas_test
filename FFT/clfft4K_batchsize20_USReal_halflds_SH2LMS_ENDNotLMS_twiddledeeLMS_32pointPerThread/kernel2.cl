/* ************************************************************************
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ************************************************************************/


__constant float2 twiddles[63] = {
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(9.2387953251128673848313610506011173e-01f, -3.8268343236508978177923268049198668e-01f),
(float2)(7.0710678118654757273731092936941423e-01f, -7.0710678118654746171500846685376018e-01f),
(float2)(3.8268343236508983729038391174981371e-01f, -9.2387953251128673848313610506011173e-01f),
(float2)(7.0710678118654757273731092936941423e-01f, -7.0710678118654746171500846685376018e-01f),
(float2)(6.1232339957367660358688201472919830e-17f, -1.0000000000000000000000000000000000e+00f),
(float2)(-7.0710678118654746171500846685376018e-01f, -7.0710678118654757273731092936941423e-01f),
(float2)(3.8268343236508983729038391174981371e-01f, -9.2387953251128673848313610506011173e-01f),
(float2)(-7.0710678118654746171500846685376018e-01f, -7.0710678118654757273731092936941423e-01f),
(float2)(-9.2387953251128684950543856757576577e-01f, 3.8268343236508967075693021797633264e-01f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(1.0000000000000000000000000000000000e+00f, -0.0000000000000000000000000000000000e+00f),
(float2)(9.9518472667219692873175063141388819e-01f, -9.8017140329560603628777926132897846e-02f),
(float2)(9.8078528040323043057924223830923438e-01f, -1.9509032201612824808378832130983938e-01f),
(float2)(9.5694033573220882438192802510457113e-01f, -2.9028467725446233105301985233381856e-01f),
(float2)(9.8078528040323043057924223830923438e-01f, -1.9509032201612824808378832130983938e-01f),
(float2)(9.2387953251128673848313610506011173e-01f, -3.8268343236508978177923268049198668e-01f),
(float2)(8.3146961230254523567140267914510332e-01f, -5.5557023301960217764872140833176672e-01f),
(float2)(9.5694033573220882438192802510457113e-01f, -2.9028467725446233105301985233381856e-01f),
(float2)(8.3146961230254523567140267914510332e-01f, -5.5557023301960217764872140833176672e-01f),
(float2)(6.3439328416364548779426968394545838e-01f, -7.7301045336273699337681364340824075e-01f),
(float2)(9.2387953251128673848313610506011173e-01f, -3.8268343236508978177923268049198668e-01f),
(float2)(7.0710678118654757273731092936941423e-01f, -7.0710678118654746171500846685376018e-01f),
(float2)(3.8268343236508983729038391174981371e-01f, -9.2387953251128673848313610506011173e-01f),
(float2)(8.8192126434835504955600526955095120e-01f, -4.7139673682599764203970948983624112e-01f),
(float2)(5.5557023301960228867102387084742077e-01f, -8.3146961230254523567140267914510332e-01f),
(float2)(9.8017140329560770162231619906378910e-02f, -9.9518472667219681770944816889823414e-01f),
(float2)(8.3146961230254523567140267914510332e-01f, -5.5557023301960217764872140833176672e-01f),
(float2)(3.8268343236508983729038391174981371e-01f, -9.2387953251128673848313610506011173e-01f),
(float2)(-1.9509032201612819257263709005201235e-01f, -9.8078528040323043057924223830923438e-01f),
(float2)(7.7301045336273699337681364340824075e-01f, -6.3439328416364548779426968394545838e-01f),
(float2)(1.9509032201612833135051516819657991e-01f, -9.8078528040323043057924223830923438e-01f),
(float2)(-4.7139673682599769755086072109406814e-01f, -8.8192126434835504955600526955095120e-01f),
(float2)(7.0710678118654757273731092936941423e-01f, -7.0710678118654746171500846685376018e-01f),
(float2)(6.1232339957367660358688201472919830e-17f, -1.0000000000000000000000000000000000e+00f),
(float2)(-7.0710678118654746171500846685376018e-01f, -7.0710678118654757273731092936941423e-01f),
(float2)(6.3439328416364548779426968394545838e-01f, -7.7301045336273699337681364340824075e-01f),
(float2)(-1.9509032201612819257263709005201235e-01f, -9.8078528040323043057924223830923438e-01f),
(float2)(-8.8192126434835493853370280703529716e-01f, -4.7139673682599786408431441486754920e-01f),
(float2)(5.5557023301960228867102387084742077e-01f, -8.3146961230254523567140267914510332e-01f),
(float2)(-3.8268343236508972626808144923415966e-01f, -9.2387953251128673848313610506011173e-01f),
(float2)(-9.8078528040323043057924223830923438e-01f, -1.9509032201612860890627132448571501e-01f),
(float2)(4.7139673682599780857316318360972218e-01f, -8.8192126434835493853370280703529716e-01f),
(float2)(-5.5557023301960195560411648330045864e-01f, -8.3146961230254545771600760417641141e-01f),
(float2)(-9.9518472667219692873175063141388819e-01f, 9.8017140329560145661780268255824922e-02f),
(float2)(3.8268343236508983729038391174981371e-01f, -9.2387953251128673848313610506011173e-01f),
(float2)(-7.0710678118654746171500846685376018e-01f, -7.0710678118654757273731092936941423e-01f),
(float2)(-9.2387953251128684950543856757576577e-01f, 3.8268343236508967075693021797633264e-01f),
(float2)(2.9028467725446233105301985233381856e-01f, -9.5694033573220893540423048762022518e-01f),
(float2)(-8.3146961230254534669370514166075736e-01f, -5.5557023301960217764872140833176672e-01f),
(float2)(-7.7301045336273688235451118089258671e-01f, 6.3439328416364559881657214646111242e-01f),
(float2)(1.9509032201612833135051516819657991e-01f, -9.8078528040323043057924223830923438e-01f),
(float2)(-9.2387953251128673848313610506011173e-01f, -3.8268343236508989280153514300764073e-01f),
(float2)(-5.5557023301960217764872140833176672e-01f, 8.3146961230254523567140267914510332e-01f),
(float2)(9.8017140329560770162231619906378910e-02f, -9.9518472667219681770944816889823414e-01f),
(float2)(-9.8078528040323043057924223830923438e-01f, -1.9509032201612860890627132448571501e-01f),
(float2)(-2.9028467725446327474259078371687792e-01f, 9.5694033573220860233732310007326305e-01f),
};


#define fptype float

#define fvect2 float2

#define C8Q  0.70710678118654752440084436210485f

__attribute__((always_inline)) void
FwdRad4B1(float2 *R0, float2 *R2, float2 *R1, float2 *R3)
{

	float2 T;

	(*R1) = (*R0) - (*R1);
	(*R0) = 2.0f * (*R0) - (*R1);
	(*R3) = (*R2) - (*R3);
	(*R2) = 2.0f * (*R2) - (*R3);

	(*R2) = (*R0) - (*R2);
	(*R0) = 2.0f * (*R0) - (*R2);
	(*R3) = (*R1) + (fvect2)(-(*R3).y, (*R3).x);
	(*R1) = 2.0f * (*R1) - (*R3);

	T = (*R1); (*R1) = (*R2); (*R2) = T;

}

__attribute__((always_inline)) void
InvRad4B1(float2 *R0, float2 *R2, float2 *R1, float2 *R3)
{

	float2 T;

	(*R1) = (*R0) - (*R1);
	(*R0) = 2.0f * (*R0) - (*R1);
	(*R3) = (*R2) - (*R3);
	(*R2) = 2.0f * (*R2) - (*R3);

	(*R2) = (*R0) - (*R2);
	(*R0) = 2.0f * (*R0) - (*R2);
	(*R3) = (*R1) + (fvect2)((*R3).y, -(*R3).x);
	(*R1) = 2.0f * (*R1) - (*R3);

	T = (*R1); (*R1) = (*R2); (*R2) = T;

}

__attribute__((always_inline)) void
FwdPass0(uint rw, uint b, uint me, uint inOffset, uint outOffset, __local float2 *bufIn, __local float2 *bufOut, float2 *R0, float2 *R1, float2 *R2, float2 *R3)
{


	if(rw)
	{
	(*R0) = bufIn[inOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1) = bufIn[inOffset + ( 0 + me*1 + 0 + 16 )*1];
	(*R2) = bufIn[inOffset + ( 0 + me*1 + 0 + 32 )*1];
	(*R3) = bufIn[inOffset + ( 0 + me*1 + 0 + 48 )*1];
	}

	else
	{
	(*R0) = (fvect2)(0, 0);
	(*R1) = (fvect2)(0, 0);
	(*R2) = (fvect2)(0, 0);
	(*R3) = (fvect2)(0, 0);
	}



	FwdRad4B1(R0, R1, R2, R3);

	barrier(CLK_LOCAL_MEM_FENCE);



	if(rw)
	{
	bufOut[outOffset + ( ((1*me + 0)/1)*4 + (1*me + 0)%1 + 0 )*1] = (*R0);
	bufOut[outOffset + ( ((1*me + 0)/1)*4 + (1*me + 0)%1 + 1 )*1] = (*R1);
	bufOut[outOffset + ( ((1*me + 0)/1)*4 + (1*me + 0)%1 + 2 )*1] = (*R2);
	bufOut[outOffset + ( ((1*me + 0)/1)*4 + (1*me + 0)%1 + 3 )*1] = (*R3);
	}

}

__attribute__((always_inline)) void
FwdPass1(uint rw, uint b, uint me, uint inOffset, uint outOffset, __local float2 *bufIn, __local float2 *bufOut, float2 *R0, float2 *R1, float2 *R2, float2 *R3,__local float2 *twiddles_LMS)
{


	if(rw)
	{
	(*R0) = bufIn[inOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1) = bufIn[inOffset + ( 0 + me*1 + 0 + 16 )*1];
	(*R2) = bufIn[inOffset + ( 0 + me*1 + 0 + 32 )*1];
	(*R3) = bufIn[inOffset + ( 0 + me*1 + 0 + 48 )*1];
	}

	else
	{
	(*R0) = (fvect2)(0, 0);
	(*R1) = (fvect2)(0, 0);
	(*R2) = (fvect2)(0, 0);
	(*R3) = (fvect2)(0, 0);
	}



	{
		float2 W = twiddles_LMS[3 + 3*((1*me + 0)%4) + 0];
		float TR, TI;
		TR = (W.x * (*R1).x) - (W.y * (*R1).y);
		TI = (W.y * (*R1).x) + (W.x * (*R1).y);
		(*R1).x = TR;
		(*R1).y = TI;
	}

	{
		float2 W = twiddles_LMS[3 + 3*((1*me + 0)%4) + 1];
		float TR, TI;
		TR = (W.x * (*R2).x) - (W.y * (*R2).y);
		TI = (W.y * (*R2).x) + (W.x * (*R2).y);
		(*R2).x = TR;
		(*R2).y = TI;
	}

	{
		float2 W = twiddles_LMS[3 + 3*((1*me + 0)%4) + 2];
		float TR, TI;
		TR = (W.x * (*R3).x) - (W.y * (*R3).y);
		TI = (W.y * (*R3).x) + (W.x * (*R3).y);
		(*R3).x = TR;
		(*R3).y = TI;
	}

	FwdRad4B1(R0, R1, R2, R3);

	barrier(CLK_LOCAL_MEM_FENCE);



	if(rw)
	{
	bufOut[outOffset + ( ((1*me + 0)/4)*16 + (1*me + 0)%4 + 0 )*1] = (*R0);
	bufOut[outOffset + ( ((1*me + 0)/4)*16 + (1*me + 0)%4 + 4 )*1] = (*R1);
	bufOut[outOffset + ( ((1*me + 0)/4)*16 + (1*me + 0)%4 + 8 )*1] = (*R2);
	bufOut[outOffset + ( ((1*me + 0)/4)*16 + (1*me + 0)%4 + 12 )*1] = (*R3);
	}

}

__attribute__((always_inline)) void
FwdPass2(uint rw, uint b, uint me,uint me_ori, uint inOffset, uint outOffset, __local float2 *bufIn, __global float2 *bufOut, float2 *R0, float2 *R1, float2 *R2, float2 *R3,__local float2 *twiddles_LMS,uint t)
{


	if(rw)
	{
	(*R0) = bufIn[inOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1) = bufIn[inOffset + ( 0 + me*1 + 0 + 16 )*1];
	(*R2) = bufIn[inOffset + ( 0 + me*1 + 0 + 32 )*1];
	(*R3) = bufIn[inOffset + ( 0 + me*1 + 0 + 48 )*1];
	}

	else
	{
	(*R0) = (fvect2)(0, 0);
	(*R1) = (fvect2)(0, 0);
	(*R2) = (fvect2)(0, 0);
	(*R3) = (fvect2)(0, 0);
	}



	{
		float2 W = twiddles_LMS[15 + 3*((1*me + 0)%16) + 0];
		float TR, TI;
		TR = (W.x * (*R1).x) - (W.y * (*R1).y);
		TI = (W.y * (*R1).x) + (W.x * (*R1).y);
		(*R1).x = TR;
		(*R1).y = TI;
	}

	{
		float2 W = twiddles_LMS[15 + 3*((1*me + 0)%16) + 1];
		float TR, TI;
		TR = (W.x * (*R2).x) - (W.y * (*R2).y);
		TI = (W.y * (*R2).x) + (W.x * (*R2).y);
		(*R2).x = TR;
		(*R2).y = TI;
	}

	{
		float2 W = twiddles_LMS[15 + 3*((1*me + 0)%16) + 2];
		float TR, TI;
		TR = (W.x * (*R3).x) - (W.y * (*R3).y);
		TI = (W.y * (*R3).x) + (W.x * (*R3).y);
		(*R3).x = TR;
		(*R3).y = TI;
	}

	FwdRad4B1(R0, R1, R2, R3);

	barrier(CLK_LOCAL_MEM_FENCE);

	//怎么进来的就怎么出去
	bufOut[ ( (me_ori/16)*64 + me)     %64 *64 + me_ori/16 + t*8] = (*R0);
	bufOut[ ( (me_ori/16)*64 + me+16 ) %64 *64 + me_ori/16 + t*8] = (*R1);
	bufOut[ ( (me_ori/16)*64 + me+32 ) %64 *64 + me_ori/16 + t*8] = (*R2);
	bufOut[ ( (me_ori/16)*64 + me+48 ) %64 *64 + me_ori/16 + t*8] = (*R3);
}
__kernel __attribute__((reqd_work_group_size (128,1,1)))
void fft_fwd(__global const float2 * restrict gbIn, __global float2 * restrict gbOut)
{
	uint me = get_local_id(0);
	uint glbid = get_group_id(0);
	__local float2 lds[512];
	__local float2 twiddles_LMS[63];
	uint iOffset;
	uint oOffset;
	__global float2 *lwbIn;
	__global float2 *lwbOut;
	if (me<63)
	{
		twiddles_LMS[me]=twiddles[me];
	}
	barrier(CLK_LOCAL_MEM_FENCE);
	float2 R0, R1, R2, R3;
	uint batch,t;
	uint rw = 1;

	uint b = 0;

	for (uint loop = 0; loop<8; loop++)
	{
//LMS位置乘以groupID就是在DDR中的位置,而且t=1其实就是索引DDR中的后512个数
//把数组分为了四份给到四个group，每个group有1024个数，再按顺序放大LDS中
//这里不需要管每个group不一样的问题了，因为lwbIn的首地址已经保证了每个group会跳1024
		t = loop;
		batch = (t / 2) + glbid*4;//每四个group一跳
		if (loop>1)
		{
			t = loop%2;
		}

		iOffset = (batch/4)*4096 + (batch%4)*1024;
		oOffset = (batch/4)*4096 + (batch%4)*16;
		lwbIn = gbIn + iOffset;
		lwbOut = gbOut + oOffset;
		R0 = lwbIn[ ( (me/16)*64 + me%16    )  + t*512];
		R1 = lwbIn[ ( (me/16)*64 + me%16+16 )  + t*512];
		R2 = lwbIn[ ( (me/16)*64 + me%16+32 )  + t*512];
		R3 = lwbIn[ ( (me/16)*64 + me%16+48 )  + t*512];
		FwdRad4B1(&R0, &R1, &R2, &R3);
		lds[(me/16)*64 + me%16*4  + 0] = R0;
		lds[(me/16)*64 + me%16*4  + 1] = R1;
		lds[(me/16)*64 + me%16*4  + 2] = R2;
		lds[(me/16)*64 + me%16*4  + 3] = R3;
		barrier(CLK_LOCAL_MEM_FENCE);

		FwdPass1(rw, b, me%16, (me/16)*64,(me/16)*64, lds, lds, &R0, &R1, &R2, &R3,twiddles_LMS);
		barrier(CLK_LOCAL_MEM_FENCE);
		FwdPass2(rw, b, me%16,me, (me/16)*64,(me/16)*64, lds, lwbOut, &R0, &R1, &R2, &R3,twiddles_LMS,t);
	}

}



